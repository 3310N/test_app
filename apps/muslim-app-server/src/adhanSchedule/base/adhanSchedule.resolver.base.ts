/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AdhanSchedule } from "./AdhanSchedule";
import { AdhanScheduleCountArgs } from "./AdhanScheduleCountArgs";
import { AdhanScheduleFindManyArgs } from "./AdhanScheduleFindManyArgs";
import { AdhanScheduleFindUniqueArgs } from "./AdhanScheduleFindUniqueArgs";
import { CreateAdhanScheduleArgs } from "./CreateAdhanScheduleArgs";
import { UpdateAdhanScheduleArgs } from "./UpdateAdhanScheduleArgs";
import { DeleteAdhanScheduleArgs } from "./DeleteAdhanScheduleArgs";
import { AdhanScheduleService } from "../adhanSchedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdhanSchedule)
export class AdhanScheduleResolverBase {
  constructor(
    protected readonly service: AdhanScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "read",
    possession: "any",
  })
  async _adhanSchedulesMeta(
    @graphql.Args() args: AdhanScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdhanSchedule])
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "read",
    possession: "any",
  })
  async adhanSchedules(
    @graphql.Args() args: AdhanScheduleFindManyArgs
  ): Promise<AdhanSchedule[]> {
    return this.service.adhanSchedules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdhanSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "read",
    possession: "own",
  })
  async adhanSchedule(
    @graphql.Args() args: AdhanScheduleFindUniqueArgs
  ): Promise<AdhanSchedule | null> {
    const result = await this.service.adhanSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdhanSchedule)
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "create",
    possession: "any",
  })
  async createAdhanSchedule(
    @graphql.Args() args: CreateAdhanScheduleArgs
  ): Promise<AdhanSchedule> {
    return await this.service.createAdhanSchedule({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdhanSchedule)
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "update",
    possession: "any",
  })
  async updateAdhanSchedule(
    @graphql.Args() args: UpdateAdhanScheduleArgs
  ): Promise<AdhanSchedule | null> {
    try {
      return await this.service.updateAdhanSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdhanSchedule)
  @nestAccessControl.UseRoles({
    resource: "AdhanSchedule",
    action: "delete",
    possession: "any",
  })
  async deleteAdhanSchedule(
    @graphql.Args() args: DeleteAdhanScheduleArgs
  ): Promise<AdhanSchedule | null> {
    try {
      return await this.service.deleteAdhanSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
