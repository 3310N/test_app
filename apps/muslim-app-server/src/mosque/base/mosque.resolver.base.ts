/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Mosque } from "./Mosque";
import { MosqueCountArgs } from "./MosqueCountArgs";
import { MosqueFindManyArgs } from "./MosqueFindManyArgs";
import { MosqueFindUniqueArgs } from "./MosqueFindUniqueArgs";
import { CreateMosqueArgs } from "./CreateMosqueArgs";
import { UpdateMosqueArgs } from "./UpdateMosqueArgs";
import { DeleteMosqueArgs } from "./DeleteMosqueArgs";
import { MosqueService } from "../mosque.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Mosque)
export class MosqueResolverBase {
  constructor(
    protected readonly service: MosqueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "read",
    possession: "any",
  })
  async _mosquesMeta(
    @graphql.Args() args: MosqueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Mosque])
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "read",
    possession: "any",
  })
  async mosques(@graphql.Args() args: MosqueFindManyArgs): Promise<Mosque[]> {
    return this.service.mosques(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Mosque, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "read",
    possession: "own",
  })
  async mosque(
    @graphql.Args() args: MosqueFindUniqueArgs
  ): Promise<Mosque | null> {
    const result = await this.service.mosque(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mosque)
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "create",
    possession: "any",
  })
  async createMosque(@graphql.Args() args: CreateMosqueArgs): Promise<Mosque> {
    return await this.service.createMosque({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mosque)
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "update",
    possession: "any",
  })
  async updateMosque(
    @graphql.Args() args: UpdateMosqueArgs
  ): Promise<Mosque | null> {
    try {
      return await this.service.updateMosque({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mosque)
  @nestAccessControl.UseRoles({
    resource: "Mosque",
    action: "delete",
    possession: "any",
  })
  async deleteMosque(
    @graphql.Args() args: DeleteMosqueArgs
  ): Promise<Mosque | null> {
    try {
      return await this.service.deleteMosque(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
