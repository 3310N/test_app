/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Prayer } from "./Prayer";
import { PrayerCountArgs } from "./PrayerCountArgs";
import { PrayerFindManyArgs } from "./PrayerFindManyArgs";
import { PrayerFindUniqueArgs } from "./PrayerFindUniqueArgs";
import { CreatePrayerArgs } from "./CreatePrayerArgs";
import { UpdatePrayerArgs } from "./UpdatePrayerArgs";
import { DeletePrayerArgs } from "./DeletePrayerArgs";
import { User } from "../../user/base/User";
import { PrayerService } from "../prayer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Prayer)
export class PrayerResolverBase {
  constructor(
    protected readonly service: PrayerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "read",
    possession: "any",
  })
  async _prayersMeta(
    @graphql.Args() args: PrayerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Prayer])
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "read",
    possession: "any",
  })
  async prayers(@graphql.Args() args: PrayerFindManyArgs): Promise<Prayer[]> {
    return this.service.prayers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Prayer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "read",
    possession: "own",
  })
  async prayer(
    @graphql.Args() args: PrayerFindUniqueArgs
  ): Promise<Prayer | null> {
    const result = await this.service.prayer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prayer)
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "create",
    possession: "any",
  })
  async createPrayer(@graphql.Args() args: CreatePrayerArgs): Promise<Prayer> {
    return await this.service.createPrayer({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Prayer)
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "update",
    possession: "any",
  })
  async updatePrayer(
    @graphql.Args() args: UpdatePrayerArgs
  ): Promise<Prayer | null> {
    try {
      return await this.service.updatePrayer({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Prayer)
  @nestAccessControl.UseRoles({
    resource: "Prayer",
    action: "delete",
    possession: "any",
  })
  async deletePrayer(
    @graphql.Args() args: DeletePrayerArgs
  ): Promise<Prayer | null> {
    try {
      return await this.service.deletePrayer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Prayer): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
