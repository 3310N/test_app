/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Prayer as PrismaPrayer,
  User as PrismaUser,
} from "@prisma/client";

export class PrayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PrayerCountArgs, "select">): Promise<number> {
    return this.prisma.prayer.count(args);
  }

  async prayers<T extends Prisma.PrayerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrayerFindManyArgs>
  ): Promise<PrismaPrayer[]> {
    return this.prisma.prayer.findMany<Prisma.PrayerFindManyArgs>(args);
  }
  async prayer<T extends Prisma.PrayerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrayerFindUniqueArgs>
  ): Promise<PrismaPrayer | null> {
    return this.prisma.prayer.findUnique(args);
  }
  async createPrayer<T extends Prisma.PrayerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrayerCreateArgs>
  ): Promise<PrismaPrayer> {
    return this.prisma.prayer.create<T>(args);
  }
  async updatePrayer<T extends Prisma.PrayerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrayerUpdateArgs>
  ): Promise<PrismaPrayer> {
    return this.prisma.prayer.update<T>(args);
  }
  async deletePrayer<T extends Prisma.PrayerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrayerDeleteArgs>
  ): Promise<PrismaPrayer> {
    return this.prisma.prayer.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.prayer
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
